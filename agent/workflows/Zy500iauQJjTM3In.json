{
  "createdAt": "2025-03-20T18:55:17.959Z",
  "updatedAt": "2025-03-23T10:00:42.000Z",
  "id": "Zy500iauQJjTM3In",
  "name": "Aggy: AI agent",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! ðŸ‘‹ My name is Aggy.\nI can help you to analyse your personal or business requests and delegate what is possible to other. Let me know what is your current goal.\nP.S.: I'm not the Skynet.",
        "options": {
          "subtitle": "Definitely Not Skynet",
          "title": "Aggy"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -60,
        -120
      ],
      "id": "1214e4ce-2fb4-4638-9e6b-6b9177cd8d34",
      "name": "When chat message received",
      "webhookId": "3374f7a5-b68a-4139-836c-ae77d1140a2f"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "={{ $json.prompt }}",
          "maxIterations": 8
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        900,
        0
      ],
      "id": "cbc8a125-98c2-46cb-a4d8-b2eac137d78f",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "contextWindowLength": 100
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        980,
        240
      ],
      "id": "fd3f8dca-530f-4744-a1d4-05e79b9f9b36",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"text\": {{ JSON.stringify($json.output) }} }",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1280,
        0
      ],
      "id": "e4f1cdfd-23a0-4136-a765-5c1186fc61d8",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "02f1ac90-0c99-44fe-844f-e657ea21798d",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -60,
        120
      ],
      "id": "bab250ae-fd04-4f97-9857-8b49f41d5ef3",
      "name": "Autonome Webhook",
      "webhookId": "02f1ac90-0c99-44fe-844f-e657ea21798d"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        1140,
        240
      ],
      "id": "f436215b-7cc3-41f2-a35a-274780acb058",
      "name": "Calculator",
      "disabled": true
    },
    {
      "parameters": {
        "name": "Convert_Deadline",
        "description": "Convert a string deadline query to a timestamp number value.\nBe sure to break down the input into an object like this:\n```json\n{ \"count\": 5, \"unit\": \"day\" }\n```\nThe \"unit\" field supports only these values: \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\". \nBe sure to input properly formatted JSON object to the tool.",
        "jsCode": "const moment = require('moment');\nconst { count, unit } = query;\nconst result = moment().add(count, unit).unix();\nreturn String(result);",
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"count\": {\n      \"type\": \"number\",\n      \"description\": \"Amount of units\"\n    },\n    \"unit\": {\n      \"type\": \"string\",\n      \"description\": \"Unit measure\",\n      \"enum\": [\"minutes\", \"hour\", \"day\", \"month\", \"year\"]\n    }\n  },\n  \"required\": [\"count\", \"unit\"],\n  \"additionalProperties\": false\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        1280,
        240
      ],
      "id": "4b7f5724-15a8-426c-9d5c-43ef9f9ddab9",
      "name": "Convert deadline"
    },
    {
      "parameters": {
        "name": "Create_Task",
        "description": "Call this to tool to create tasks.\nGenerate task name based on task details.\nExtract reward and penalty values as numbers (in USD).\nConvert deadline to a timestamp number value.",
        "workflowId": {
          "__rl": true,
          "value": "8E2qaFHJQr0doATZ",
          "mode": "list",
          "cachedResultName": "MultiBaaS + Privy: Create Task"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "userId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('userId', `User ID returned from the Get_User_Id function call.`, 'string') }}",
            "penalty": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('penalty', `Financial penalty for failing the task.  It can't be 0 so if it's undefined just pass a default value: 100.`, 'number') }}",
            "deadline": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('deadline', `Timestamp of a deadline for task completion as a number.  It can't be 0 so if it's undefined just use a default value: 1 day. Use Convert_Deadline tool to convert the text deadline value to a number value.`, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('name', `Task name - short line of text which summarises the task.`, 'string') }}",
            "details": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('details', `The detailed task description and requirements omitting info on financial conditions and timeline.`, 'string') }}",
            "reward": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('reward', `Financial compensation for executing the task. It can't be 0 so if it's undefined just pass a default value: 100.`, 'number') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "userId",
              "displayName": "userId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "details",
              "displayName": "details",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "reward",
              "displayName": "reward",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "penalty",
              "displayName": "penalty",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "deadline",
              "displayName": "deadline",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        1060,
        380
      ],
      "id": "a13114af-7da5-4077-b7aa-0b5068362a03",
      "name": "Create a task"
    },
    {
      "parameters": {
        "name": "Get_User_Id",
        "description": "Call this tool to determine if the user has signed in and get the user ID for using in other tools. It returns string value of user ID. It returns empty string for non-logged in users. It accepts no arguments.",
        "jsCode": "\nif ($(\"Autonome Webhook\").isExecuted) {\n  return $(\"Autonome Webhook\").item.json.body.userId ?? '';\n}\nreturn '';"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        1420,
        240
      ],
      "id": "ab1afd70-a743-4394-b419-6cbcfb039585",
      "name": "Get user ID"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "meta-llama/Llama-3.1-8B-Instruct",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        680,
        300
      ],
      "id": "4e0ea1b2-2f87-484b-9b2b-666301c81495",
      "name": "Nillion LLM",
      "credentials": {
        "openAiApi": {
          "id": "iq6d1pB9Re0Dp5tF",
          "name": "Nillion SecretLLM account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        860,
        300
      ],
      "id": "b3f5b1a3-8101-4ec8-9007-98b85ccc8691",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "l3PyuxSuNhOWKxdX",
          "name": "OpenAI account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        680,
        0
      ],
      "id": "13d3ae12-5305-4d5d-8fc0-351f42527308",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb6e44e4-307d-4cbd-b419-67d5c18ed7ae",
              "name": "chatInput",
              "value": "={{ $json.body.text }}",
              "type": "string"
            },
            {
              "id": "eb9f65c6-f1df-4d3c-876e-c22cefa1c4c7",
              "name": "action",
              "value": "sendMessage",
              "type": "string"
            },
            {
              "id": "c5023fbd-4fe6-42a9-b547-57a9e6835fd1",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        160,
        120
      ],
      "id": "9a85576d-c76f-4ee2-84f3-12b5559950fc",
      "name": "Normlalize input"
    },
    {
      "parameters": {
        "content": "This is a drop-in replacement for the OpenAI LLM API, but Nillion doesn't provide a model of sufficient size for this workflow to work so it's left disabled for now.",
        "height": 280,
        "width": 320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        180
      ],
      "typeVersion": 1,
      "id": "8b5e4803-7cf7-4c93-b35f-88df9a7242f4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "name": "Insert_Task_Private_Data",
        "description": "Call this tool to attach private data to the task by its ID.",
        "workflowId": {
          "__rl": true,
          "value": "QBI6a9zMRJaErfqI",
          "mode": "list",
          "cachedResultName": "Nillion SecretVault: Insert Task data"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "taskId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('taskId', `Task ID which is returned from the Create_Task tool call.`, 'string') }}",
            "data": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('data', `Raw string containing private data to store to be consumed by a human.`, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "taskId",
              "displayName": "taskId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        1320,
        540
      ],
      "id": "ca2cb404-74ba-4805-9cb8-f4f5da01d394",
      "name": "Write private Task data"
    },
    {
      "parameters": {
        "content": "This tool uses Nillion SecretVault for storing sensitive Task data after submitting the public data to blockchain.",
        "height": 280,
        "width": 320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1200,
        420
      ],
      "typeVersion": 1,
      "id": "075f1606-6a3d-4d1e-aa14-1e6a80619a38",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "BbySeVM6TYgAh9zy",
          "mode": "list",
          "cachedResultName": "MultiBaas: Get AI Agent prompt"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        380,
        -120
      ],
      "id": "e4039cdd-341e-4eb4-81a5-a10c45af9501",
      "name": "Get AI promtp"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get AI promtp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Autonome Webhook": {
      "main": [
        [
          {
            "node": "Normlalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Convert deadline": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create a task": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get user ID": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Nillion LLM": {
      "ai_languageModel": [
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normlalize input": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get AI promtp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write private Task data": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get AI promtp": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "05b12038-90de-4350-9049-c112a85d66a8",
  "triggerCount": 3,
  "tags": []
}